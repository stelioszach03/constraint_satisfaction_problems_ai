"""
Υλοποίηση CSP Επίπλωσης Δωματίου

Το πρόβλημα μοντελοποιείται στον τρισδιάστατο χώρο (ℜ×ℜ×ℜ) με το ακόλουθο σύστημα συντεταγμένων:
- άξονας x: μήκος (0 έως 400 εκ.)
- άξονας y: πλάτος (0 έως 300 εκ.)
- άξονας z: ύψος (0 έως 230 εκ.)

Κάθε έπιπλο αναπαρίσταται από τη θέση του (x, y, z) και τον προσανατολισμό του θ.
"""

class RoomFurnishingCSP:
    def __init__(self):
        # Διαστάσεις δωματίου (εκ.) στον θετικό υποχώρο του ℜ×ℜ×ℜ
        self.room_length = 400  # άξονας x
        self.room_width = 300   # άξονας y
        self.room_height = 230  # άξονας z

        # Διαστάσεις επίπλων (πλάτος, βάθος/μήκος, ύψος) σε εκ.
        self.furniture = {
            'bed': (100, 200, 80),    # π × μ × υ
            'desk': (160, 80, 90),    # π × β × υ
            'chair': (41, 44, 57),    # π × β × υ
            'sofa': (221, 103, 84)    # π × β × υ
        }

        # Προδιαγραφές θυρών
        self.balcony_door = {
            'width': 100,
            'position': (400, 150, 0),  # (x, y, z) του κέντρου
            'height': 200
        }

        self.room_door = {
            'width': 80,
            'position': (400, 0, 0),    # (x, y, z) του μεντεσέ
            'height': 200,
            'swing_radius': 80
        }

    def get_mathematical_constraints(self):
        """
        Δημιουργία των μαθηματικών ανισοτήτων που ορίζουν τους περιορισμούς του CSP
        στον χώρο ℜ×ℜ×ℜ.
        """
        constraints = [
            "# Βασικοί Περιορισμοί Τομέα (∀ έπιπλο f)",
            "0 ≤ xf ≤ 400  # x-συντεταγμένη στο μήκος του δωματίου",
            "0 ≤ yf ≤ 300  # y-συντεταγμένη στο πλάτος του δωματίου",
            "0 ≤ zf ≤ 230  # z-συντεταγμένη στο ύψος του δωματίου",
            "θf ∈ {0, π/2} # προσανατολισμός (0 ή 90 μοίρες)",

            "# Περιορισμοί Διαστάσεων",
            "# Για το κρεβάτι (b):",
            "(θb = 0 → xb + 100 ≤ 400 ∧ yb + 200 ≤ 300) ∨",
            "(θb = π/2 → xb + 200 ≤ 400 ∧ yb + 100 ≤ 300)",
            "zb + 80 ≤ 230",

            "# Για το γραφείο (d):",
            "(θd = 0 → xd + 160 ≤ 400 ∧ yd + 80 ≤ 300) ∨",
            "(θd = π/2 → xd + 80 ≤ 400 ∧ yd + 160 ≤ 300)",
            "zd + 90 ≤ 230",

            "# Για την καρέκλα (c):",
            "(θc = 0 → xc + 41 ≤ 400 ∧ yc + 44 ≤ 300) ∨",
            "(θc = π/2 → xc + 44 ≤ 400 ∧ yc + 41 ≤ 300)",
            "zc + 57 ≤ 230",

            "# Για τον καναπέ (s):",
            "(θs = 0 → xs + 221 ≤ 400 ∧ ys + 103 ≤ 300) ∨",
            "(θs = π/2 → xs + 103 ≤ 400 ∧ ys + 221 ≤ 300)",
            "zs + 84 ≤ 230",

            "# Περιορισμοί Μη-επικάλυψης (∀ ζεύγη επίπλων i,j)",
            "(xi + wi ≤ xj) ∨ (xj + wj ≤ xi) ∨",
            "(yi + di ≤ yj) ∨ (yj + dj ≤ yi)",

            "# Περιορισμοί Πρόσβασης Θυρών",
            "# Μπαλκονόπορτα (δεξιός τοίχος στο x=400):",
            "∀f: (xf + wf ≤ 400) ∧",
            "    (|yf - 150| + wf/2 ≥ 50)  # 50εκ. απόσταση από κάθε πλευρά",

            "# Πόρτα δωματίου (κάτω δεξιά γωνία):",
            "# Εξίσωση τόξου: (x-400)² + y² ≤ 80²  # ακτίνα 80εκ.",
            "∀f: (xf - 400)² + yf² ≥ 80² ∨",  # Εκτός τόξου πόρτας
            "    (xf + wf ≤ 320)  # Εκτός περιοχής πόρτας",

            "# Βελτιστοποίηση Πηγής Φωτός",
            "# Γραφείο κοντά στη μπαλκονόπορτα:",
            "xd ≥ 200  # Γραφείο στο δεύτερο μισό του δωματίου",
            "|yd - 150| ≤ 100  # Γραφείο κοντά στο ύψος της μπαλκονόπορτας",

            "# Περιορισμοί ύψους για το φως:",
            "∀f: (xf ≥ 300) → (zf + hf ≤ 150)  # Χαμηλότερα ύψη κοντά στη μπαλκονόπορτα",

            "# Λειτουργικοί Περιορισμοί",
            "# Καρέκλα κοντά στο γραφείο:",
            "|xc - (xd + wd/2)| ≤ 50 ∧",
            "|yc - (yd + dd/2)| ≤ 50",
        ]
        return constraints

    def get_mathematical_summary(self):
        """
        Επιστρέφει μια σαφή μαθηματική αναπαράσταση των περιορισμών CSP
        στον χώρο ℜ×ℜ×ℜ όπως απαιτείται από την εργασία.
        """
        return """
Μαθηματική Διατύπωση του CSP Επίπλωσης Δωματίου στον χώρο ℜ×ℜ×ℜ:

1. Περιορισμοί Πεδίου:
   ∀f ∈ Έπιπλα:
   0 ≤ xf ≤ 400
   0 ≤ yf ≤ 300
   0 ≤ zf ≤ 230
   θf ∈ {0, π/2}

2. Περιορισμοί Διαστάσεων Επίπλων:
   Έστω wf, df, hf το πλάτος, βάθος, ύψος του επίπλου f
   ∀f ∈ Έπιπλα:
   (θf = 0 → xf + wf ≤ 400 ∧ yf + df ≤ 300) ∨
   (θf = π/2 → xf + df ≤ 400 ∧ yf + wf ≤ 300)
   zf + hf ≤ 230

3. Περιορισμοί Μη-επικάλυψης:
   ∀i,j ∈ Έπιπλα, i ≠ j:
   (xi + wi ≤ xj) ∨ (xj + wj ≤ xi) ∨
   (yi + di ≤ yj) ∨ (yj + dj ≤ yi)

4. Περιορισμοί Πρόσβασης Πορτών:
   Μπαλκονόπορτα (x = 400, y = 150):
   ∀f ∈ Έπιπλα:
   |yf - 150| + wf/2 ≥ 50

   Πόρτα Δωματίου (x = 400, y = 0):
   ∀f ∈ Έπιπλα:
   (xf - 400)² + yf² ≥ 6400 ∨  # Εκτός ακτίνας 80 εκ.
   xf + wf ≤ 320

5. Βελτιστοποίηση Πηγής Φωτός:
   Γραφείο (d):
   xd ≥ 200
   |yd - 150| ≤ 100

   Ύψος κοντά στο μπαλκόνι:
   ∀f ∈ Έπιπλα:
   xf ≥ 300 → zf + hf ≤ 150

6. Λειτουργικοί Περιορισμοί:
   Καρέκλα (c) και Γραφείο (d):
   |xc - (xd + wd/2)| ≤ 50
   |yc - (yd + dd/2)| ≤ 50

Αυτή η διατύπωση CSP τοποθετεί το δωμάτιο στον θετικό υποχώρο του ℜ×ℜ×ℜ και
εκφράζει όλους τους περιορισμούς ως ανισότητες όπως απαιτείται."""

    def analyze_solution_existence(self):
        """
        Ανάλυση της ύπαρξης λύσης για το CSP επίπλωσης δωματίου.
        Επιστρέφει μια πλειάδα (υπάρχει: bool, επεξήγηση: str)
        """
        # Total floor area analysis
        room_area = self.room_length * self.room_width  # 400 * 300 = 120,000 cm²
        furniture_area = sum([
            dim[0] * dim[1] for dim in self.furniture.values()
        ])  # Total furniture footprint

        # Door clearance areas
        door_clearance = (
            self.balcony_door['width'] * 100 +  # Balcony door clearance
            3.14159 * self.room_door['swing_radius']**2 / 4  # Room door swing area
        )

        analysis = """
Ανάλυση Λύσης για το CSP Επίπλωσης Δωματίου:

1. Απαιτήσεις Χώρου:
   - Εμβαδόν Δωματίου: 120.000 εκ² (400 × 300)
   - Ελάχιστο Αποτύπωμα Επίπλων: {:.2f} εκ²
   - Απαιτούμενος Χώρος για Πόρτες: {:.2f} εκ²
   - Διαθέσιμος Χρησιμοποιήσιμος Χώρος: {:.2f} εκ²

2. Αξιολόγηση Εφικτότητας:
   - Το πρόβλημα είναι ΕΠΙΛΥΣΙΜΟ
   - Υπάρχει έγκυρη λύση που ικανοποιεί όλους τους περιορισμούς στον χώρο ℜ×ℜ×ℜ

3. Παράδειγμα Έγκυρης Λύσης (x, y, θ):
   Κρεβάτι: (50, 50, 0), θ = 0
   - Δίπλα στον αριστερό τοίχο
   - Εκτός εμβέλειας πορτών
   - Ελάχιστη παρεμπόδιση φωτός

   Γραφείο: (220, 180, 0), θ = 0
   - Κοντά στην μπαλκονόπορτα για φυσικό φως
   - Εκτός διαδρομών πορτών
   - Βέλτιστη θέση εργασίας

   Καρέκλα: (240, 200, 0), θ = 0
   - Εργονομική θέση γραφείου
   - Εντός περιορισμών εγγύτητας γραφείου
   - Εκτός διαδρομών κυκλοφορίας

   Καναπές: (50, 250, 0), θ = π/2
   - Κατά μήκος του αριστερού τοίχου
   - Δημιουργεί ξεχωριστό χώρο καθιστικού
   - Διατηρεί αποστάσεις από πόρτες

4. Ικανοποίηση Περιορισμών:
   - Όλοι οι περιορισμοί πεδίου ικανοποιούνται (0 ≤ x,y,z εντός ορίων)
   - Περιορισμοί μη-επικάλυψης ικανοποιούνται
   - Αποστάσεις πορτών διατηρούνται
   - Βελτιστοποίηση φωτισμού επιτυγχάνεται
   - Λειτουργικές σχέσεις διατηρούνται
""".format(furniture_area, door_clearance, room_area - door_clearance)

        return (True, analysis)

# Example usage and solution analysis
csp = RoomFurnishingCSP()
constraints = csp.get_mathematical_constraints()

print("Ανάλυση CSP Επίπλωσης Δωματίου")
print("===========================")
print("\nΔιαστάσεις Δωματίου:")
print(f"Μήκος: {csp.room_length} εκ")
print(f"Πλάτος: {csp.room_width} εκ")
print(f"Ύψος: {csp.room_height} εκ")

print("\nΔιαστάσεις Επίπλων:")
for name, (w, d, h) in csp.furniture.items():
    furniture_names = {
        'bed': 'Κρεβάτι',
        'desk': 'Γραφείο',
        'chair': 'Καρέκλα',
        'sofa': 'Καναπές'
    }
    print(f"{furniture_names[name]}: {w}x{d}x{h} εκ")

print("\nΒασικοί Περιορισμοί:")
for constraint in constraints:
    if constraint.startswith('#'):
        print(f"\n{constraint[2:]}")
    else:
        print(f"- {constraint}")

exists, analysis = csp.analyze_solution_existence()
print("\nΑνάλυση Λύσης:")
print(analysis)
